#!/bin/bash

# N8N Minimal Setup Script
# Based on plan.md - streamlined implementation with directory flexibility

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get current directory dynamically
N8N_DIR=$(pwd)
INSECURE_MODE=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --insecure)
            INSECURE_MODE=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [--insecure]"
            echo "  --insecure  Enable insecure mode (for development/testing only)"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Logging function
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "${N8N_DIR}/logs/setup.log"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "${N8N_DIR}/logs/setup.log"
    exit 1
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a "${N8N_DIR}/logs/setup.log"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1" | tee -a "${N8N_DIR}/logs/setup.log"
}

# Generate secure password
generate_password() {
    openssl rand -base64 32 | tr -d "=+/" | cut -c1-25
}

# Generate encryption key
generate_encryption_key() {
    openssl rand -base64 32
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Phase 1: Directory Preparation
setup_directories() {
    log "Phase 1: Setting up directories in ${N8N_DIR}"
    
    # Create required directories
    mkdir -p "${N8N_DIR}/config"
    mkdir -p "${N8N_DIR}/workflows"
    mkdir -p "${N8N_DIR}/logs"
    
    # Set secure permissions for config directory
    chmod 700 "${N8N_DIR}/config"
    
    log "Directories created successfully"
}

# Phase 2: System Dependencies
install_dependencies() {
    log "Phase 2: Checking and installing system dependencies"
    
    # Check Node.js version
    if command_exists node; then
        NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
        if [ "$NODE_VERSION" -ge 18 ]; then
            log "Node.js v${NODE_VERSION} found - OK"
        else
            warn "Node.js version is too old (v${NODE_VERSION}). Need v18+"
            info "Installing Node.js v18..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
        fi
    else
        info "Node.js not found. Installing Node.js v18..."
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs
    fi
    
    # Check npm
    if ! command_exists npm; then
        error "npm not found after Node.js installation"
    fi
    
    # Check PostgreSQL
    if ! command_exists psql; then
        info "PostgreSQL not found. Installing..."
        sudo apt-get update
        sudo apt-get install -y postgresql postgresql-contrib
        sudo systemctl start postgresql
        sudo systemctl enable postgresql
    else
        log "PostgreSQL found - OK"
    fi
    
    log "Dependencies check completed"
}

# Setup PostgreSQL database
setup_database() {
    log "Setting up PostgreSQL database"
    
    # Generate secure password for database user
    DB_PASSWORD=$(generate_password)
    
    # Create database and user
    sudo -u postgres psql -c "CREATE DATABASE n8n_db;" 2>/dev/null || log "Database n8n_db already exists"
    sudo -u postgres psql -c "CREATE USER n8n_user WITH PASSWORD '${DB_PASSWORD}';" 2>/dev/null || {
        log "User n8n_user already exists, updating password"
        sudo -u postgres psql -c "ALTER USER n8n_user WITH PASSWORD '${DB_PASSWORD}';"
    }
    sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE n8n_db TO n8n_user;"
    
    # Store password for later use
    echo "$DB_PASSWORD" > "${N8N_DIR}/config/.db_password"
    chmod 600 "${N8N_DIR}/config/.db_password"
    
    log "Database setup completed"
}

# Phase 3: N8N Installation & Configuration
install_n8n() {
    log "Phase 3: Installing and configuring n8n"
    
    # Install n8n globally
    if ! command_exists n8n; then
        info "Installing n8n globally..."
        sudo npm install -g n8n
    else
        log "n8n already installed - OK"
    fi
    
    # Read database password
    DB_PASSWORD=$(cat "${N8N_DIR}/config/.db_password")
    
    # Generate encryption key
    ENCRYPTION_KEY=$(generate_encryption_key)
    
    # Create .env file
    cat > "${N8N_DIR}/config/.env" << EOF
# N8N Configuration - Generated by minimal setup
DB_TYPE=postgresdb
DB_HOST=localhost
DB_PORT=5432
DB_DATABASE=n8n_db
DB_USERNAME=n8n_user
DB_PASSWORD=${DB_PASSWORD}
N8N_PORT=5678
N8N_HOST=0.0.0.0
WEBHOOK_URL=http://localhost:5678
N8N_USER_FOLDER=${N8N_DIR}
WORKFLOWS_FOLDER=${N8N_DIR}/workflows
N8N_ENCRYPTION_KEY=${ENCRYPTION_KEY}
N8N_LOG_LEVEL=info
N8N_LOG_OUTPUT=file
N8N_LOG_FILE_LOCATION=${N8N_DIR}/logs/
EOF

    # Add insecure mode if requested
    if [ "$INSECURE_MODE" = true ]; then
        echo "N8N_SECURE_COOKIE=false" >> "${N8N_DIR}/config/.env"
        warn "Insecure mode enabled - only use for development/testing!"
    fi
    
    # Set secure permissions
    chmod 600 "${N8N_DIR}/config/.env"
    
    log "n8n configuration completed"
}

# Phase 4: Create startup scripts
create_startup_scripts() {
    log "Phase 4: Creating startup scripts"
    
    # Create secure start script
    cat > "${N8N_DIR}/start_n8n.sh" << 'EOF'
#!/bin/bash
# N8N Secure Start Script

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source environment variables
if [ -f "${SCRIPT_DIR}/config/.env" ]; then
    set -a
    source "${SCRIPT_DIR}/config/.env"
    set +a
    echo "Starting n8n in secure mode..."
    echo "Access n8n at: http://localhost:${N8N_PORT:-5678}"
    n8n start
else
    echo "Error: Configuration file not found at ${SCRIPT_DIR}/config/.env"
    echo "Please run the setup script first."
    exit 1
fi
EOF

    # Create insecure start script
    cat > "${N8N_DIR}/start_n8n_insecure.sh" << 'EOF'
#!/bin/bash
# N8N Insecure Start Script (Development/Testing Only)

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source environment variables
if [ -f "${SCRIPT_DIR}/config/.env" ]; then
    set -a
    source "${SCRIPT_DIR}/config/.env"
    set +a
    
    # Override for insecure mode
    export N8N_SECURE_COOKIE=false
    
    echo "WARNING: Starting n8n in INSECURE mode!"
    echo "This should only be used for development/testing."
    echo "Access n8n at: http://localhost:${N8N_PORT:-5678}"
    n8n start
else
    echo "Error: Configuration file not found at ${SCRIPT_DIR}/config/.env"
    echo "Please run the setup script first."
    exit 1
fi
EOF

    # Make scripts executable
    chmod +x "${N8N_DIR}/start_n8n.sh"
    chmod +x "${N8N_DIR}/start_n8n_insecure.sh"
    
    log "Startup scripts created"
}

# Test the installation
test_installation() {
    log "Testing installation..."
    
    # Test database connection
    if PGPASSWORD=$(cat "${N8N_DIR}/config/.db_password") psql -h localhost -U n8n_user -d n8n_db -c "SELECT 1;" >/dev/null 2>&1; then
        log "Database connection test: PASSED"
    else
        error "Database connection test: FAILED"
    fi
    
    # Test n8n command
    if command_exists n8n; then
        log "n8n command test: PASSED"
    else
        error "n8n command test: FAILED"
    fi
    
    log "Installation tests completed successfully"
}

# Main execution
main() {
    log "Starting N8N Minimal Setup in directory: ${N8N_DIR}"
    
    if [ "$INSECURE_MODE" = true ]; then
        warn "INSECURE MODE ENABLED - Only use for development/testing!"
    fi
    
    setup_directories
    install_dependencies
    setup_database
    install_n8n
    create_startup_scripts
    test_installation
    
    log "Setup completed successfully!"
    echo
    echo -e "${GREEN}=== N8N Setup Complete ===${NC}"
    echo -e "Directory: ${BLUE}${N8N_DIR}${NC}"
    echo -e "Start n8n: ${BLUE}./start_n8n.sh${NC}"
    if [ "$INSECURE_MODE" = true ]; then
        echo -e "Start insecure: ${YELLOW}./start_n8n_insecure.sh${NC}"
    fi
    echo -e "Access URL: ${BLUE}http://localhost:5678${NC}"
    echo
    echo -e "${YELLOW}Next steps:${NC}"
    echo "1. Run ./start_n8n.sh to start n8n"
    echo "2. Open http://localhost:5678 in your browser"
    echo "3. Create your first admin user"
    echo
    if [ "$INSECURE_MODE" = true ]; then
        echo -e "${RED}WARNING: Insecure mode is enabled. Switch to secure mode for production!${NC}"
    fi
}

# Run main function
main "$@"